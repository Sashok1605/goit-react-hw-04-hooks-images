{"version":3,"sources":["services/ApiService.js","components/Searchbar/Searchbar.jsx","components/ImageGalleryItem/ImageGalleryItem.jsx","components/ImageGallery/ImageGallery.jsx","components/Button/Button.jsx","components/Loader/Loader.jsx","components/Modal/Modal.jsx","App.js","index.js"],"names":["axios","defaults","baseURL","SearchForm","onSubmit","useState","query","setQuery","className","e","preventDefault","type","value","autoComplete","autoFocus","placeholder","onChange","queryValue","currentTarget","toLowerCase","trim","ImageGalleryItem","picturesId","srcWebformat","onClick","src","alt","ImageGallery","children","Button","LoaderPreLoader","color","height","width","timeout","modalRoot","document","querySelector","Modal","onClose","handleKeyDown","code","useEffect","window","addEventListener","removeEventListener","createPortal","target","App","pictures","setPictures","page","setPage","largeImage","setlargeImage","error","setError","showModal","setShowModal","isLoading","setIsLoading","fetchPictures","options","pageSize","get","then","response","data","hits","apiService","prevPictures","catch","finally","smoothScroll","toggleModal","prevState","console","log","scrollTo","top","documentElement","scrollHeight","behavior","map","id","webformatURL","largeImageURL","Loader","length","ReactDOM","render","StrictMode","getElementById"],"mappings":"6PAEAA,IAAMC,SAASC,QAAU,2BACzB,I,OC+BeC,EAhCI,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACpB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAYA,OACE,wBAAQC,UAAU,YAAlB,SACE,uBAAMA,UAAU,aAAaJ,SARZ,SAAAK,GACnBA,EAAEC,iBACFN,EAASE,GACTC,EAAS,KAKP,UACE,wBAAQI,KAAK,SAASH,UAAU,sBAEhC,uBACEA,UAAU,mBACVG,KAAK,OACLC,MAAON,EACPO,aAAa,MACbC,WAAS,EACTC,YAAY,2BACZC,SAtBa,SAAAP,GACnB,IAAMQ,EAAaR,EAAES,cAAcN,MAAMO,cAAcC,OACvDb,EAASU,YCCEI,EARU,SAAC,GAA0C,EAAxCC,WAAyC,IAA7BC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,QACpD,OACE,oBAAIhB,UAAU,mBAAmBgB,QAASA,EAA1C,SACE,qBAAKC,IAAKF,EAAcG,IAAI,GAAGlB,UAAU,8BCChCmB,EAJM,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACtB,OAAO,oBAAIpB,UAAU,eAAd,SAA8BoB,KCaxBC,EAZA,SAAC,GAAiB,IAAfL,EAAc,EAAdA,QAChB,OACE,wBAAQhB,UAAU,SAASG,KAAK,SAASa,QAASA,EAAlD,wB,iBCYWM,G,MAbS,WACtB,OACE,cAAC,IAAD,CACEtB,UAAU,SACVG,KAAK,YACLoB,MAAM,UACNC,OAAQ,GACRC,MAAO,GACPC,QAAS,QCPTC,EAAYC,SAASC,cAAc,eAE1B,SAASC,EAAT,GAAuC,IAAtBV,EAAqB,EAArBA,SAAUW,EAAW,EAAXA,QAClCC,EAAgB,SAAA/B,GACL,WAAXA,EAAEgC,MACJF,KAiBJ,OAPAG,qBAAU,WAER,OADAC,OAAOC,iBAAiB,UAAWJ,GAC5B,WACLG,OAAOE,oBAAoB,UAAWL,OAInCM,uBACL,qBAAKtC,UAAU,UAAUgB,QAdC,SAAAf,GACtBA,EAAES,gBAAkBT,EAAEsC,QACxBR,KAYF,SACE,qBAAK/B,UAAU,QAAf,SAAwBoB,MAE1BO,GCpBJ,IA0Fea,EA1FH,WACV,MAAgC3C,mBAAS,IAAzC,mBAAO4C,EAAP,KAAiBC,EAAjB,KACA,EAAwB7C,mBAAS,GAAjC,mBAAO8C,EAAP,KAAaC,EAAb,KACA,EAA0B/C,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAoCF,mBAAS,IAA7C,mBAAOgD,EAAP,KAAmBC,EAAnB,KACA,EAA0BjD,mBAAS,MAAnC,mBAAOkD,EAAP,KAAcC,EAAd,KACA,EAAkCnD,oBAAS,GAA3C,mBAAOoD,EAAP,KAAkBC,EAAlB,KACA,EAAkCrD,oBAAS,GAA3C,mBAAOsD,EAAP,KAAkBC,EAAlB,KAEMC,EAAgB,WACpB,IAAMC,EAAU,CACdX,OACA7C,SAGFsD,GAAa,GPpBE,SAAC,GAA6C,IAAD,IAA1CtD,aAA0C,MAAlC,GAAkC,MAA9B6C,YAA8B,MAAvB,EAAuB,MAApBY,gBAAoB,MAAT,GAAS,EAC9D,OAAO/D,IACJgE,IADI,gBAHO,qCAGP,cAEmB1D,EAFnB,iBAEiC6C,EAFjC,6DAE0FY,IAE9FE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,KAAKC,QOiBhCC,CAAWP,GACRG,MACC,SAAAK,GAAY,OAAIpB,EAAY,GAAD,mBAAKD,GAAL,YAAkBqB,OAC7ClB,EAAQD,EAAO,IAEhBoB,OAAM,SAAAhB,GAAK,OAAIC,EAASD,MACxBiB,SAAQ,WACPC,IACAb,GAAa,OAInBlB,qBAAU,WACHpC,GAILuD,MAEC,CAACvD,IAEJ,IAAMoE,EAAc,WAClBhB,GAAa,SAAAiB,GAAS,OAAKA,MAcvBF,EAAe,WACnBG,QAAQC,IAAR,OAAoB1B,GAChBA,EAAO,GACTR,OAAOmC,SAAS,CACdC,IAAK3C,SAAS4C,gBAAgBC,aAC9BC,SAAU,YAKhB,OACE,sBAAK1E,UAAU,MAAf,UACE,cAAC,EAAD,CAAYJ,SAnBM,SAAAE,GACpBC,EAASD,GACT8C,EAAQ,GACRF,EAAY,IACZM,EAAS,SAiBND,GAAS,gFAEV,cAAC,EAAD,UACGN,EAASkC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,aAAcC,EAArB,EAAqBA,cAArB,OACZ,cAAC,EAAD,CAEE/D,aAAc8D,EACd7D,QAAS,kBA/BjB8B,EA+BwCgC,QA9BxCZ,MA4BaU,QAMVzB,GAAa,cAAC4B,EAAD,IACbtC,EAASuC,OAAS,KAAO7B,GAAa,cAAC,EAAD,CAAQnC,QAASqC,IAEvDJ,GACC,cAACnB,EAAD,CAAOC,QAASmC,EAAhB,SACE,qBAAKjD,IAAK4B,EAAY3B,IAAI,WCxFpC+D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFvD,SAASwD,eAAe,W","file":"static/js/main.daa4bfcb.chunk.js","sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://pixabay.com/api/';\nconst API_KEY = '23761306-59ca6a0f0608395e39c81a3c2';\n\nconst apiService = ({ query = '', page = 1, pageSize = 12 }) => {\n  return axios\n    .get(\n      `/?key=${API_KEY}&q=${query}&page=${page}&image_type=photo&orientation=horizontal&per_page=${pageSize}`,\n    )\n    .then(response => response.data.hits);\n};\nexport { apiService };\n","import { useState } from 'react';\n\nconst SearchForm = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const handleChange = e => {\n    const queryValue = e.currentTarget.value.toLowerCase().trim();\n    setQuery(queryValue);\n  };\n  const handleSubmit = e => {\n    e.preventDefault();\n    onSubmit(query);\n    setQuery('');\n  };\n\n  return (\n    <header className=\"Searchbar\">\n      <form className=\"SearchForm\" onSubmit={handleSubmit}>\n        <button type=\"submit\" className=\"SearchForm-button\"></button>\n\n        <input\n          className=\"SearchForm-input\"\n          type=\"text\"\n          value={query}\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n          onChange={handleChange}\n        />\n      </form>\n    </header>\n  );\n};\n\nexport default SearchForm;\n","const ImageGalleryItem = ({ picturesId, srcWebformat, onClick }) => {\n  return (\n    <li className=\"ImageGalleryItem\" onClick={onClick}>\n      <img src={srcWebformat} alt=\"\" className=\"ImageGalleryItem-image\" />\n    </li>\n  );\n};\n\nexport default ImageGalleryItem;\n","const ImageGallery = ({ children }) => {\n  return <ul className=\"ImageGallery\">{children}</ul>;\n};\n\nexport default ImageGallery;\n","import PropTypes from 'prop-types';\n\nconst Button = ({ onClick }) => {\n  return (\n    <button className=\"Button\" type=\"button\" onClick={onClick}>\n      Load more\n    </button>\n  );\n};\n\nButton.propTypes = {\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n","import Loader from 'react-loader-spinner';\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\n\nconst LoaderPreLoader = () => {\n  return (\n    <Loader\n      className=\"Loader\"\n      type=\"ThreeDots\"\n      color=\"#00BFFF\"\n      height={80}\n      width={80}\n      timeout={4000}\n    />\n  );\n};\n\nexport default LoaderPreLoader;\n","import { createPortal } from 'react-dom';\nimport { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport default function Modal({ children, onClose }) {\n  const handleKeyDown = e => {\n    if (e.code === 'Escape') {\n      onClose();\n    }\n  };\n\n  const handleBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      onClose();\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handleKeyDown);\n    return () => {\n      window.removeEventListener('keydown', handleKeyDown);\n    };\n  });\n\n  return createPortal(\n    <div className=\"Overlay\" onClick={handleBackdropClick}>\n      <div className=\"Modal\">{children}</div>\n    </div>,\n    modalRoot,\n  );\n}\n\nModal.propTypes = {\n  children: PropTypes.node.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n","import { useState, useEffect } from 'react';\nimport './App.css';\nimport { apiService } from './services/ApiService';\nimport SearchForm from './components/Searchbar';\nimport ImageGalleryItem from './components/ImageGalleryItem';\nimport ImageGallery from './components/ImageGallery';\nimport Button from './components/Button';\nimport LoaderPreLoader from './components/Loader';\nimport Modal from './components/Modal';\n\nconst App = () => {\n  const [pictures, setPictures] = useState([]);\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState('');\n  const [largeImage, setlargeImage] = useState('');\n  const [error, setError] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const fetchPictures = () => {\n    const options = {\n      page,\n      query,\n    };\n\n    setIsLoading(true);\n\n    apiService(options)\n      .then(\n        prevPictures => setPictures([...pictures, ...prevPictures]),\n        setPage(page + 1),\n      )\n      .catch(error => setError(error))\n      .finally(() => {\n        smoothScroll();\n        setIsLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    if (!query) {\n      return;\n    }\n\n    fetchPictures();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [query]);\n\n  const toggleModal = () => {\n    setShowModal(prevState => !prevState);\n  };\n\n  const handleImageClick = url => {\n    setlargeImage(url);\n    toggleModal();\n  };\n  const onChangeQuery = query => {\n    setQuery(query);\n    setPage(1);\n    setPictures([]);\n    setError(null);\n  };\n\n  const smoothScroll = () => {\n    console.log(`page`, page);\n    if (page > 1) {\n      window.scrollTo({\n        top: document.documentElement.scrollHeight,\n        behavior: 'smooth',\n      });\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <SearchForm onSubmit={onChangeQuery} />\n\n      {error && <p>Sorry! Somethimg went wrong. Try again, please!</p>}\n\n      <ImageGallery>\n        {pictures.map(({ id, webformatURL, largeImageURL }) => (\n          <ImageGalleryItem\n            key={id}\n            srcWebformat={webformatURL}\n            onClick={() => handleImageClick(largeImageURL)}\n          />\n        ))}\n      </ImageGallery>\n      {isLoading && <LoaderPreLoader />}\n      {pictures.length > 11 && !isLoading && <Button onClick={fetchPictures} />}\n\n      {showModal && (\n        <Modal onClose={toggleModal}>\n          <img src={largeImage} alt=\"\" />\n        </Modal>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}